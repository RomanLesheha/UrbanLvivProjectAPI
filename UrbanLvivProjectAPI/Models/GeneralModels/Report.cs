namespace UrbanLvivProjectAPI.Models.GeneralModels;

public class Report
{
    public string Id { get; set; }
    /// <summary>
    /// The title of the report describing the problem.
    /// </summary>
    public string Title { get; set; }
    
    /// <summary>
    /// A detailed description of the problem reported by the user.
    /// </summary>
    public string Description { get; set; }
    
    /// <summary>
    /// URL to the image uploaded by the user to illustrate the problem.
    /// </summary>
    public string ImageUrl { get; set; }
    
    /// <summary>
    /// The type of problem being reported, such as roads, garbage, crime, etc.
    /// </summary>
    public ProblemType TypeOfProblem { get; set; }
    
    /// <summary>
    /// The ID of the user who created the report.
    /// </summary>
    public int CreatorId { get; set; }
    
    /// <summary>
    /// The location where the problem is identified.
    /// </summary>
    public string Location { get; set; }
    
    /// <summary>
    /// The date and time when the report was created.
    /// </summary>
    public DateTime TimeOfCreation { get; set; }
    
    /// <summary>
    /// The priority of the issue, assigned by AI based on importance or urgency.
    /// </summary>
    public int Priority { get; set; }
    
    /// <summary>
    /// Indicates whether the report has been processed by AI.
    /// </summary>
    public bool IsProcessedByAI { get; set; }
    
    /// <summary>
    /// The current status of AI processing, such as pending, in progress, or completed.
    /// </summary>
    public AIProcessingStatus AIProcessingStatus { get; set; }
    
    /// <summary>
    /// A formal and readable description generated by AI after processing the report.
    /// </summary>
    public string AIDescription { get; set; }
    
    /// <summary>
    /// The current status of the report's processing by the authorities, such as in review or completed.
    /// </summary>
    public ProcessingStatus ProcessingStatus { get; set; }
    
    /// <summary>
    /// Indicates whether the issue has been fully resolved.
    /// </summary>
    public bool IsCompleted { get; set; }
    
    /// <summary>
    /// The percentage of completion for resolving the issue.
    /// </summary>
    public double CompletionPercentage { get; set; }
    
    /// <summary>
    /// Recommendations generated by AI to help resolve the problem.
    /// </summary>
    public string AIRecommendations { get; set; }
    
    /// <summary>
    /// An official summary or formal conclusion after processing the report.
    /// </summary>
    public string OfficialSummary { get; set; }
}
